{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pushkar Waykole\\\\Desktop\\\\WE project\\\\client\\\\src\\\\components\\\\Main\\\\Typing\\\\Typing.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./Typing.css\"; ////////////////////////////////https://www.youtube.com/watch?v=Hpf2OmYnqhw\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getCloud = () => `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.`.split(\" \");\n\nfunction Word(props) {\n  const {\n    text,\n    active,\n    correct\n  } = props; // const rerender = useRef(0);\n  // useEffect(() => {\n  //   rerender.current += 1;\n  // });\n\n  if (correct === true) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"correct\",\n      children: [text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (correct === false) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"incorrect\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (active === true) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"active\",\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Word;\nWord = /*#__PURE__*/React.memo(Word);\n\nfunction Timer(props) {\n  _s();\n\n  const {\n    correctWords\n  } = props;\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  useEffect(() => {\n    let id;\n\n    if (props.startCounting) {\n      id = setInterval(() => {\n        setTimeElapsed(oldTime => oldTime + 1);\n      }, 1000);\n    }\n\n    return () => {\n      clearInterval(id);\n    };\n  }, [props.startCounting]);\n  const minutes = timeElapsed / 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time:\", timeElapsed]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Speed: \", (correctWords / minutes || 0).toFixed(2), \" WPM \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Timer, \"SZxNbD1d+OuypfQIgyFHbrghQ2g=\");\n\n_c2 = Timer;\nexport default function App() {\n  _s2();\n\n  const [userInput, setUserInput] = useState(\"\");\n  const cloud = useRef(getCloud());\n  const [startCounting, setStartCounting] = useState(false);\n  const [activeWordIndex, setActiveWordIndex] = useState(0);\n  const [correctWordArray, setCorrectWordArray] = useState([]);\n\n  function processInput(value) {\n    if (!startCounting) {\n      setStartCounting(true);\n    }\n\n    if (value.endsWith(\" \")) {\n      //the user  finished the word\n      if (activeWordIndex === cloud.current.length - 1) {\n        //overflow\n        setStartCounting(false);\n        setUserInput(\"Completed\");\n        return;\n      }\n\n      setActiveWordIndex(index => index + 1);\n      setUserInput(\"\");\n      setCorrectWordArray(data => {\n        const word = value.trim();\n        const newResult = [...data];\n        newResult[activeWordIndex] = word === cloud.current[activeWordIndex];\n        return newResult;\n      });\n    } else {\n      setUserInput(value);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Typing test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      startCounting: startCounting,\n      correctWords: correctWordArray.filter(Boolean).length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: cloud.current.map((word, index) => {\n        return /*#__PURE__*/_jsxDEV(Word, {\n          text: word,\n          active: index === activeWordIndex,\n          correct: correctWordArray[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      style: {\n        border: \"2px solid black\"\n      },\n      type: \"text\",\n      value: userInput,\n      onChange: e => processInput(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setUserInput(\"\"),\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"kQ25nkugqXR7bfu422uaUqSo0pc=\");\n\n_c3 = App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Word\");\n$RefreshReg$(_c2, \"Timer\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["C:/Users/Pushkar Waykole/Desktop/WE project/client/src/components/Main/Typing/Typing.js"],"names":["React","useEffect","useRef","useState","getCloud","split","Word","props","text","active","correct","memo","Timer","correctWords","timeElapsed","setTimeElapsed","id","startCounting","setInterval","oldTime","clearInterval","minutes","toFixed","App","userInput","setUserInput","cloud","setStartCounting","activeWordIndex","setActiveWordIndex","correctWordArray","setCorrectWordArray","processInput","value","endsWith","current","length","index","data","word","trim","newResult","filter","Boolean","map","border","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Typing.css\";\r\n\r\n////////////////////////////////https://www.youtube.com/watch?v=Hpf2OmYnqhw\r\nconst getCloud = () =>\r\n  `Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.`.split(\r\n    \" \"\r\n  );\r\n\r\nfunction Word(props) {\r\n  const { text, active, correct } = props;\r\n\r\n  // const rerender = useRef(0);\r\n\r\n  // useEffect(() => {\r\n  //   rerender.current += 1;\r\n  // });\r\n\r\n  if (correct === true) {\r\n    return (\r\n      <span className=\"correct\">\r\n        {text} </span>\r\n    );\r\n  }\r\n  if (correct === false) {\r\n    return (\r\n      <span className=\"incorrect\">\r\n        {text} \r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (active === true) {\r\n    return (\r\n      <span className=\"active\">\r\n        {text} \r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {text} \r\n    </span>\r\n  );\r\n}\r\n\r\nWord = React.memo(Word);\r\n\r\nfunction Timer(props) {\r\n  const { correctWords } = props;\r\n  const [timeElapsed, setTimeElapsed] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let id\r\n    if (props.startCounting) {\r\n      id=setInterval(() => {\r\n        setTimeElapsed((oldTime) => oldTime + 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return ()=>{\r\n      clearInterval(id)\r\n    }\r\n  }, [props.startCounting]);\r\n\r\n  const minutes = timeElapsed / 60;\r\n  return (\r\n    <div>\r\n      <p>Time:{timeElapsed}</p>\r\n      <p>Speed: {((correctWords / minutes) || 0).toFixed(2)} WPM </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  const cloud = useRef(getCloud());\r\n\r\n  const [startCounting, setStartCounting] = useState(false);\r\n\r\n  const [activeWordIndex, setActiveWordIndex] = useState(0);\r\n\r\n  const [correctWordArray, setCorrectWordArray] = useState([]);\r\n\r\n  function processInput(value) {\r\n    if (!startCounting) {\r\n      setStartCounting(true);\r\n    }\r\n\r\n    if (value.endsWith(\" \")) {\r\n      //the user  finished the word\r\n\r\n      if(activeWordIndex === cloud.current.length -1){\r\n        //overflow\r\n        setStartCounting(false)\r\n        setUserInput(\"Completed\")\r\n        return \r\n      }\r\n      setActiveWordIndex((index) => index + 1);\r\n      setUserInput(\"\");\r\n\r\n      setCorrectWordArray((data) => {\r\n        const word = value.trim();\r\n        const newResult = [...data];\r\n        newResult[activeWordIndex] = word === cloud.current[activeWordIndex];\r\n        return newResult;\r\n      });\r\n    } else {\r\n      setUserInput(value);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Typing test</h1>\r\n      <Timer\r\n        startCounting={startCounting}\r\n        correctWords={correctWordArray.filter(Boolean).length}\r\n      />\r\n      <p>\r\n        {cloud.current.map((word, index) => {\r\n          return (\r\n            <Word\r\n              text={word}\r\n              active={index === activeWordIndex}\r\n              correct={correctWordArray[index]}\r\n            />\r\n          );\r\n        })}\r\n      </p>\r\n      <input\r\n        style={{ border: \"2px solid black\" }}\r\n        type=\"text\"\r\n        value={userInput}\r\n        onChange={(e) => processInput(e.target.value)}\r\n      />\r\n      <button onClick={() => setUserInput(\"\")}>Reset</button>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}